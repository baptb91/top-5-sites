import { writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';
import { 
  generateV2SitemapIndex, 
  generateMainSitemap, 
  generateBlogSitemap, 
  generateLegalSitemap 
} from '../src/utils/sitemapGenerator';

// Fonction pour s'assurer que le r√©pertoire existe
const ensureDirectory = (dirPath: string) => {
  try {
    mkdirSync(dirPath, { recursive: true });
  } catch (error) {
    // Le r√©pertoire existe d√©j√†
  }
};

// Fonction principale pour g√©n√©rer tous les sitemaps v2
const generateV2Sitemaps = async () => {
  console.log('üöÄ G√©n√©ration des sitemaps v2 structur√©s...');
  
  const publicDir = join(process.cwd(), 'public');
  const distDir = join(process.cwd(), 'dist');
  
  // S'assurer que les r√©pertoires existent
  ensureDirectory(publicDir);
  ensureDirectory(distDir);
  
  try {
    // G√©n√©rer le contenu des sitemaps avec les slugs corrects depuis blogPosts.ts
    const sitemapIndex = generateV2SitemapIndex();
    const mainSitemap = generateMainSitemap();
    const blogSitemap = generateBlogSitemap();
    const legalSitemap = generateLegalSitemap();
    
    console.log('üîç V√©rification des slugs utilis√©s dans le sitemap blog...');
    console.log('üìù Nombre d\'articles dans blogPosts:', require('../src/data/blogPosts').blogPosts.length);
    
    // Fichiers √† cr√©er
    const files = [
      {
        name: 'sitemap-v2-index.xml',
        content: `<?xml version="1.0" encoding="UTF-8"?>\n${sitemapIndex}`,
        description: 'Index principal des sitemaps'
      },
      {
        name: 'sitemap-v2-content-main.xml',
        content: `<?xml version="1.0" encoding="UTF-8"?>\n${mainSitemap}`,
        description: 'Sitemap des pages principales'
      },
      {
        name: 'sitemap-v2-content-blog.xml',
        content: `<?xml version="1.0" encoding="UTF-8"?>\n${blogSitemap}`,
        description: 'Sitemap des articles de blog'
      },
      {
        name: 'sitemap-v2-content-legal.xml',
        content: `<?xml version="1.0" encoding="UTF-8"?>\n${legalSitemap}`,
        description: 'Sitemap des pages l√©gales'
      }
    ];
    
    // √âcrire les fichiers dans public/ et dist/
    files.forEach(file => {
      const publicPath = join(publicDir, file.name);
      const distPath = join(distDir, file.name);
      
      // √âcrire dans public/
      writeFileSync(publicPath, file.content, 'utf8');
      console.log(`‚úÖ ${file.description} g√©n√©r√©: public/${file.name}`);
      
      // √âcrire dans dist/ si le r√©pertoire existe
      try {
        writeFileSync(distPath, file.content, 'utf8');
        console.log(`‚úÖ ${file.description} g√©n√©r√©: dist/${file.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  Dist non disponible pour ${file.name} (normal en d√©veloppement)`);
      }
    });
    
    const report = {
      timestamp: new Date().toISOString(),
      sitemapsGenerated: files.map(f => f.name),
      totalUrls: {
        main: 2, // accueil + blog
        blog: blogSitemap.split('<url>').length - 1,
        legal: 4 // 4 pages l√©gales
      },
      indexUrl: 'https://www.rencontrecoquine.info/sitemap-v2-index.xml',
      blogUrlsGenerated: blogSitemap.match(/<loc>https:\/\/www\.rencontrecoquine\.info\/blog\/([^<]+)<\/loc>/g)?.map(match => 
        match.replace(/<loc>https:\/\/www\.rencontrecoquine\.info\/blog\//, '').replace(/<\/loc>/, '')
      ) || []
    };
    
    const reportPath = join(publicDir, 'sitemap-v2-generation-report.json');
    writeFileSync(reportPath, JSON.stringify(report, null, 2), 'utf8');
    console.log('üìä Rapport de g√©n√©ration cr√©√©: sitemap-v2-generation-report.json');
    
    console.log('\nüéØ SITEMAPS V2 G√âN√âR√âS AVEC SUCC√àS!');
    console.log('üìù URL √† soumettre dans Google Search Console:');
    console.log('   https://www.rencontrecoquine.info/sitemap-v2-index.xml');
    console.log('\nüìã Structure g√©n√©r√©e:');
    console.log('   ‚îú‚îÄ‚îÄ sitemap-v2-index.xml (index principal)');
    console.log('   ‚îú‚îÄ‚îÄ sitemap-v2-content-main.xml (accueil + blog)');
    console.log('   ‚îú‚îÄ‚îÄ sitemap-v2-content-blog.xml (articles)');
    console.log('   ‚îî‚îÄ‚îÄ sitemap-v2-content-legal.xml (pages l√©gales)');
    
    return report;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des sitemaps v2:', error);
    throw error;
  }
};

// Fonction de validation des sitemaps
const validateV2Sitemaps = () => {
  console.log('\nüîç Validation des sitemaps v2...');
  
  const publicDir = join(process.cwd(), 'public');
  const files = [
    'sitemap-v2-index.xml',
    'sitemap-v2-content-main.xml', 
    'sitemap-v2-content-blog.xml',
    'sitemap-v2-content-legal.xml'
  ];
  
  files.forEach(filename => {
    try {
      const content = require('fs').readFileSync(join(publicDir, filename), 'utf8');
      
      // V√©rifications de base
      const checks = [
        { test: content.startsWith('<?xml version="1.0" encoding="UTF-8"?>'), name: 'D√©claration XML' },
        { test: content.includes('xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'), name: 'Namespace sitemap' },
        { test: !content.includes('sitemap-v2-index.xml'), name: 'Pas d\'auto-r√©f√©rence' },
        { test: content.includes('https://www.rencontrecoquine.info/'), name: 'URLs valides' }
      ];
      
      const passed = checks.filter(check => check.test).length;
      const total = checks.length;
      
      if (passed === total) {
        console.log(`‚úÖ ${filename}: ${passed}/${total} v√©rifications pass√©es`);
      } else {
        console.log(`‚ö†Ô∏è  ${filename}: ${passed}/${total} v√©rifications pass√©es`);
        checks.forEach(check => {
          console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
        });
      }
      
    } catch (error) {
      console.log(`‚ùå ${filename}: Fichier non trouv√© ou erreur de lecture`);
    }
  });
  
  console.log('‚ú® Validation termin√©e');
};

// Ex√©cution si appel√© directement
if (require.main === module) {
  generateV2Sitemaps()
    .then(() => {
      validateV2Sitemaps();
    })
    .catch(console.error);
}

export { generateV2Sitemaps, validateV2Sitemaps };